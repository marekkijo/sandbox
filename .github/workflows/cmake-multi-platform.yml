name: multiplatform-cmake-build-with-tests

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    name: ${{ matrix.setup.os }} - ${{ matrix.setup.preset }}
    runs-on: ${{ matrix.setup.os }}

    strategy:
      fail-fast: false

      matrix:
        setup:
          - os: macos-latest
            preset: xcode
          #          - os: windows-latest
          #            preset: vs2022
          #
          #          - os: macos-latest
          #            preset: ninja
          #          - os: windows-latest
          #            preset: ninja
          #          - os: ubuntu-latest
          #            preset: ninja
          #
          - os: macos-latest
            preset: emscripten
    #          - os: windows-latest
    #            preset: emscripten
    #          - os: ubuntu-latest
    #            preset: emscripten

    steps:
      #- name: Set up ACTIONS_CACHE_URL and ACTIONS_RUNTIME_TOKEN for caching
      #  uses: actions/github-script@v7
      #  with:
      #    script: |
      #      core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
      #      core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get CMake
        uses: lukka/get-cmake@latest

      - name: Get nasm
        if: matrix.setup.os == 'ubuntu-latest'
        uses: ilammy/setup-nasm@v1

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/vcpkg_cache
          key: vcpkg-${{ matrix.setup.os }}-${{ matrix.setup.preset }}-${{ hashFiles('vcpkg-configuration.json', 'vcpkg.json', 'wasm32-emscripten/vcpkg.json', 'CMakeLists.txt', '**/CMakeLists.txt', 'CMakePresets.json') }}

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11

      - name: Cache Emscripten
        if: matrix.setup.preset == 'emscripten'
        uses: actions/cache@v4
        with:
          path: emsdk-cache
          key: Emscripten-4.0.16-${{ matrix.setup.os }}

      - name: Setup Emscripten
        if: matrix.setup.preset == 'emscripten'
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: 4.0.16
          actions-cache-folder: emsdk-cache

      - name: Run CMake and CTest
        uses: lukka/run-cmake@v10
        env:
          VCPKG_BINARY_SOURCES: clear;files,${{ github.workspace }}/vcpkg_cache,readwrite
        with:
          configurePreset: ${{ matrix.setup.preset }}
          buildPreset: ${{ matrix.setup.preset }}
          testPreset: ${{ matrix.setup.preset }}
#      - name: Install system dependencies
#        run: |
#          if [ "$RUNNER_OS" == "Linux" ]; then
#            sudo apt-get update
#            sudo apt-get install nasm
#          elif [ "$RUNNER_OS" == "macOS" ]; then
#            brew install nasm
#          elif [ "$RUNNER_OS" == "Windows" ]; then
#            # NASM is usually available or vcpkg handles it
#            echo "NASM handling on Windows..."
#          fi
#        shell: bash

#      - name: Setup Emscripten
#        if: matrix.setup.preset == 'emscripten'
#        run: |
#          git clone https://github.com/emscripten-core/emsdk.git
#          cd emsdk
#          ./emsdk install latest
#          ./emsdk activate latest
#
#          # Set EMSDK environment variable for all subsequent steps
#          echo "EMSDK=$PWD" >> $GITHUB_ENV
#
#          # Source the environment and export variables
#          source ./emsdk_env.sh
#
#          # Make emcc available in PATH
#          echo "$PWD/upstream/emscripten" >> $GITHUB_PATH
#
#          # Verify installation
#          which emcc
#          emcc --version
#        shell: bash

#      - name: Setup Ninja
#        uses: seanmiddleditch/gha-setup-ninja@master
