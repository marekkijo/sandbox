# Workflow created based on CppCMakeVcpkgTemplate by lukka
# For more details visit: https://github.com/lukka/CppCMakeVcpkgTemplate/blob/v11/.github/workflows/hosted-pure-workflow.yml
name: multiplatform-cmake-build-with-tests

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    name: ${{ matrix.setup.os }} - ${{ matrix.setup.preset }}
    runs-on: ${{ matrix.setup.os }}

    strategy:
      fail-fast: false

      matrix:
        setup:
          - os: windows-2025
            preset: vs2022
          - os: ubuntu-24.04
            preset: ninja
          - os: macos-15
            preset: xcode

    env:
      _VCPKG_: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
      VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

    steps:
      - name: Set up ACTIONS_CACHE_URL and ACTIONS_RUNTIME_TOKEN for caching
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'
        run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        shell: bash

      - name: Get CMake
        uses: lukka/get-cmake@latest

      - name: Restore vcpkg
        uses: actions/cache@v4
        with:
          path: |
            ${{ env._VCPKG_ }}
            !${{ env._VCPKG_ }}/buildtrees
            !${{ env._VCPKG_ }}/packages
            !${{ env._VCPKG_ }}/downloads
            !${{ env._VCPKG_ }}/installed
          key: |
            ${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}

      - name: Setup vcpkg for non-Emscripten
        if: matrix.setup.preset != 'emscripten'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: "vcpkg.json"

      - name: Setup vcpkg for Emscripten
        if: matrix.setup.preset == 'emscripten'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: "wasm32-emscripten/vcpkg.json"

      - name: Run CMake and CTest
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ${{ matrix.setup.preset }}
          buildPreset: ${{ matrix.setup.preset }}
          testPreset: ${{ matrix.setup.preset }}
#      - name: Install system dependencies
#        run: |
#          if [ "$RUNNER_OS" == "Linux" ]; then
#            sudo apt-get update
#            sudo apt-get install nasm
#          elif [ "$RUNNER_OS" == "macOS" ]; then
#            brew install nasm
#          elif [ "$RUNNER_OS" == "Windows" ]; then
#            # NASM is usually available or vcpkg handles it
#            echo "NASM handling on Windows..."
#          fi
#        shell: bash

#      - name: Setup Emscripten
#        if: matrix.setup.preset == 'emscripten'
#        run: |
#          git clone https://github.com/emscripten-core/emsdk.git
#          cd emsdk
#          ./emsdk install latest
#          ./emsdk activate latest
#
#          # Set EMSDK environment variable for all subsequent steps
#          echo "EMSDK=$PWD" >> $GITHUB_ENV
#
#          # Source the environment and export variables
#          source ./emsdk_env.sh
#
#          # Make emcc available in PATH
#          echo "$PWD/upstream/emscripten" >> $GITHUB_PATH
#
#          # Verify installation
#          which emcc
#          emcc --version
#        shell: bash

#      - name: Setup Ninja
#        uses: seanmiddleditch/gha-setup-ninja@master

#      - name: Set reusable strings
#        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
#        id: strings
#        shell: bash
#        run: |
#          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

#      - name: Run CMake consuming CMakePreset.json and run vcpkg to build packages
#        uses: lukka/run-cmake@v10
#        with:
#          configurePreset: ${{ matrix.setup.preset }}
#          buildPreset: ${{ matrix.setup.preset }}

#      - name: Build
#        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#        run: cmake --build --preset ${{ matrix.setup.preset }}

#      - name: Test
#        # working-directory: ${{ steps.strings.outputs.build-output-dir }}
#        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#        run: ctest --test-dir build/${{ matrix.setup.preset }}
